//재귀: 어떤 것을 정의할때 자신을 참조하는 것.
//재귀에서 생길 수 있는 문제를 동적프로그래밍으로 해결할 수 있다.
function myFunction(number) {
  if (number > 15) return; //기저조건
  console.log(number);
  myFunction(number + 1);
}
myFunction(1); // 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ...
//자동으로 종료? 콜스택이 꽉차면 종료. 메모리가 금방 가득참.
//call stack : 함수가 호출되면 콜스택에 쌓임. 함수가 종료되면 콜스택에서 제거됨. first in last out
//탈출조건은(기저조건) 꼭 필요함.

//재귀함수는 콜스택에 계속쌓이기 때문에 for문으로 해결할 수 있는걸 재귀로 해결할 경우 콜스택이 금방 차서 메모리가 금방 차게됨.
//그래서 동적 프로그래밍으로 해결해야함.
//재귀함수의 사용예시 : 팩토리얼
//팩토리얼 : 1부터 n까지의 정수를 모두 곱한것
//n! = n * (n-1) * (n-2) * ... * 1
